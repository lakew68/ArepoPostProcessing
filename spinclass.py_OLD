"""
Program to compute spin parameter using class
spinparam is an object that calculates the spinparameter and other things

6/13/18: added if name == main functionality
If program is run directly, pickled data will be created and saved.
"""
import matplotlib
#matplotlib.use('Agg')
from sys import argv
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import scipy.stats as stats
import readsubfHDF5
import snapHDF5 as snap
import hdf5lib
try:
	import cPickle as pickle
except:
	import pickle

#Should be run with a snap number input
#script, s_res, s_vel,  s_snap = argv
#snapnum = int(s_snap) 
#vel = s_vel 
#res = s_res 
def dx_wrap(dx,box):
	idx = dx > +box/2.0
	dx[idx] -= box
	idx = dx < -box/2.0
	dx[idx] += box 
	return dx
def dist2(dx,dy,dz,box):
	return dx_wrap(dx,box)**2 + dx_wrap(dy,box)**2 + dx_wrap(dz,box)**2

class spinparam(object):
	def __init__(self, res, vel, s_snap):
		self.vel = vel
		self.res = res
		self.snapnum = int(s_snap)
		filename = "/n/hernquistfs3/mvogelsberger/GlobularClusters/InterfaceWArepo_All_" + self.res + '_' + self.vel  + "/output/"
		filename2 = filename +  "DM_FOF" #Used for readsubfHDF5
		filename3 = filename + "snap_" + str(self.snapnum).zfill(3) #Used for hdf5lib, snapHDF5
		if self.res == '2.8Mpc':
			filename3 = filename + "snapdir_" + str(self.snapnum).zfill(3)+"/snap_" + str(self.snapnum).zfill(3)  
		

		#Units
		GRAVITY_cgs = 6.672e-8
		UnitLength_in_cm = 3.085678e21 # code length unit in cm/h
		UnitMass_in_g = 1.989e43       # code length unit in g/h
		UnitVelocity_in_cm_per_s = 1.0e5
		UnitTime_in_s= UnitLength_in_cm / UnitVelocity_in_cm_per_s
		UnitDensity_in_cgs= UnitMass_in_g/ np.power(UnitLength_in_cm,3)
		UnitPressure_in_cgs= UnitMass_in_g/ UnitLength_in_cm/ np.power(UnitTime_in_s,2)
		UnitEnergy_in_cgs= UnitMass_in_g * np.power(UnitLength_in_cm,2) / np.power(UnitTime_in_s,2)
		GCONST=GRAVITY_cgs/ np.power(UnitLength_in_cm,3) * UnitMass_in_g *  np.power(UnitTime_in_s,2)
		critical_density = 3.0*.1 * .1 / 8.0/np.pi/GCONST #.1 is for 1/Mpc to 1/kpc, also in units of h^2

		header = snap.snapshot_header(filename3)
		if res == "2.8Mpc":
			fs = hdf5lib.OpenFile(filename3 + ".0.hdf5")
		else:
			fs = hdf5lib.OpenFile(filename3 + ".hdf5")
		red = hdf5lib.GetAttr(fs, "Header", "Redshift")
		atime = hdf5lib.GetAttr(fs, "Header", "Time")
		boxSize = hdf5lib.GetAttr(fs, "Header", "BoxSize")
		boxSize *= atime #convert from ckpc/h to kpc/h
		Omega0 = hdf5lib.GetAttr(fs, "Header", "Omega0")
		OmegaLambda = hdf5lib.GetAttr(fs, "Header", "OmegaLambda")
		fs.close()
		cat = readsubfHDF5.subfind_catalog(filename2, self.snapnum)
		Omega_a = Omega0/(Omega0 + OmegaLambda * atime * atime * atime)
		critical_density *= (Omega0/Omega_a)
		r200 = cat.Group_R_Crit200
		r200 *= atime #convert from ckpc/h to kpc/h
		m200 = cat.Group_M_Crit200
		haloCMvel = cat.GroupVel
		haloCMvel *= 1./atime #convert from km/s/a to km/s
		haloPos = cat.GroupPos
		haloPos *= atime #convert from ckpc/h to kpc/h

		#Initialize arrays
		spinparam = np.zeros(np.size(r200))
		jsptotspinparam = np.zeros(np.size(r200))
		jspgasspinparam = np.zeros(np.size(r200))
		jspdmspinparam = np.zeros(np.size(r200))
		gasfrac = np.zeros(np.size(r200))
		costheta = np.zeros(np.size(r200)) #misalignment angle
		v200 = np.zeros(np.size(r200))
		velgasall = np.zeros(np.size(r200)) 
		veldmall = np.zeros(np.size(r200))
		virialratio = np.zeros(np.size(r200))
		numGas = np.zeros(np.size(r200))
		numDM = np.zeros(np.size(r200)) 

		#Read in particles
		massgas = snap.read_block(filename3, "MASS", parttype=0)
		massdm = snap.read_block(filename3, "MASS", parttype=1)
		posgas = snap.read_block(filename3, "POS ", parttype=0)
		posdm = snap.read_block(filename3, "POS ", parttype=1)
		velgas = snap.read_block(filename3, "VEL ", parttype=0)
		veldm = snap.read_block(filename3, "VEL ", parttype=1)
		#redefine position units from ckpc/h to kpc/h
		posgas *= atime
		posdm *= atime
		#redefine velocity units from kmsqrt(a)/s to km/s
		velgas *= np.sqrt(atime)
		veldm *= np.sqrt(atime)

		#boxSize hubble flow correction for halo CM velocity subtraction
		boxSizeVel = boxSize * .1 * UnitLength_in_cm/UnitVelocity_in_cm_per_s * np.sqrt(Omega0/atime/atime/atime + OmegaLambda)

		#load particle indices
		goodidx, indgas, inddm = np.load('particleindex_' + self.res + '_' + self.vel + '_' + str(self.snapnum) + '.npy')
		goodidx = goodidx.astype(int)
		over1 = []

		for i,j in enumerate(goodidx):
			#remove halo CM velocity
			tempvelgas = dx_wrap(velgas[indgas[i]] - haloCMvel[j],boxSizeVel)
			tempveldm = dx_wrap(veldm[inddm[i]] - haloCMvel[j],boxSizeVel)
			#redefine positions wrt COM
			tempposgas = dx_wrap(posgas[indgas[i]] - haloPos[j],boxSize)
			tempposdm = dx_wrap(posdm[inddm[i]] - haloPos[j],boxSize)
			numDM[j] = np.size(tempposdm)
			numGas[j] = np.size(tempposgas)
			#Calculating j200
			#j200 of all particles
			j200vecgas = np.sum(np.cross(tempposgas,tempvelgas)*massgas[indgas[i]][:, np.newaxis],axis=0)
			j200vecdm = np.sum(np.cross(tempposdm,tempveldm)*massdm[inddm[i]][:, np.newaxis],axis=0)
			if np.size(tempvelgas)!=0: #can be no gas particles!
				costheta[j] = np.dot(j200vecgas,j200vecdm)/np.linalg.norm(j200vecgas)/np.linalg.norm(j200vecdm)
			j200vec = j200vecgas + j200vecdm
			j200 = np.linalg.norm(j200vec)
			j200gas = np.linalg.norm(j200vecgas)
			j200dm = np.linalg.norm(j200vecdm)
			v200[j] = np.sqrt(GCONST*m200[j]/r200[j])
			#Rodriguez spin parameter
			spinparam[j] = j200/np.sqrt(2)/m200[j]/v200[j]/r200[j]
			#Zjupa spin parameter
			totalmass = massgas[indgas[i]].sum(dtype='float64') + massdm[inddm[i]].sum(dtype='float64')
			jsptotspinparam[j] = j200/np.sqrt(2)/v200[j]/r200[j]/totalmass
			if np.size(tempveldm)!=0: #tempveldm can be empty no dm particles!
				jspdmspinparam[j] = j200dm/np.sqrt(2)/v200[j]/r200[j]/massdm[inddm[i]].sum(dtype='float64')
			if np.size(tempvelgas)!=0: #tempvelgas can be empty no gas particles!
				jspgasspinparam[j] = j200gas/np.sqrt(2)/v200[j]/r200[j]/massgas[indgas[i]].sum(dtype='float64')
			if spinparam[j] > 1.:
				over1.append(j)	
				if np.size(tempvelgas)!=0: #tempvelgas can be empty no gas particles!
					velgasall[j]=np.mean(np.apply_along_axis(np.linalg.norm,1,tempvelgas))
				veldmall[j]=np.mean(np.apply_along_axis(np.linalg.norm,1,tempveldm))
			gasfrac[j] = massgas[indgas[i]].sum(dtype='float64') / (massgas[indgas[i]].sum(dtype='float64') + massdm[inddm[i]].sum(dtype='float64'))

		#Reindex goodidx to account for SO halos with DM particles >300
		goodidx2 = goodidx[numDM[goodidx] > 300]

		#Plotting
		#Redfine in terms of goodidx2
		self.spinparam = spinparam[goodidx2]
		self.jsptotspinparam = jsptotspinparam[goodidx2]
		self.jspgasspinparam = jspgasspinparam[goodidx2]
		self.jspdmspinparam = jspdmspinparam[goodidx2]
		self.gasfrac = gasfrac[goodidx2]	
		self.m200 = m200[goodidx2]
		self.m200 *= 10**10  #Redefine in terms of solar mass
		self.costheta = costheta[goodidx2]
		self.gasfracCosTheta = self.gasfrac[self.costheta!=0.]
		self.m2002 = self.m200[self.costheta!=0.]
		self.costheta = self.costheta[self.costheta!=0.] #take out the 0 gas components
		self.thetadeg = np.arccos(self.costheta)*180./np.pi
		# The 2 are for plotting nonzero misalignments


if __name__ == '__main__':
	#If this program is being run directly, create/save the pickled data files

	#load class instances for all runs
	
	s112Mpc_Sig0_22 = spinparam('1.12Mpc','Sig0','22')
	s112Mpc_118kms_22 = spinparam('1.12Mpc','11.8kms','22')
	s112Mpc_Sig0_10 = spinparam('1.12Mpc', 'Sig0', '10')
	s112Mpc_118kms_10 = spinparam('1.12Mpc', '11.8kms', '10')

	s14Mpc_Sig0_22 = spinparam('1.4Mpc','Sig0','22')
	s14Mpc_118kms_22 = spinparam('1.4Mpc','11.8kms','22')
	s14Mpc_Sig0_10 = spinparam('1.4Mpc', 'Sig0', '10')
	s14Mpc_118kms_10 = spinparam('1.4Mpc', '11.8kms', '10')


	#pickle files
	f = open('s112Mpc_Sig0_22.dat', 'w')
	pickle.dump(s112Mpc_Sig0_22,f)
	f.close()
	f = open('s112Mpc_118kms_22.dat', 'w')
	pickle.dump(s112Mpc_118kms_22,f)
	f.close()
	f = open('s112Mpc_Sig0_10.dat', 'w')
	pickle.dump(s112Mpc_Sig0_10,f)
	f.close()
	f = open('s112Mpc_118kms_10.dat', 'w')
	pickle.dump(s112Mpc_118kms_10,f)
	f.close()
	f = open('s14Mpc_Sig0_22.dat', 'w')
	pickle.dump(s14Mpc_Sig0_22,f)
	f.close()
	f = open('s14Mpc_118kms_22.dat','w')
	pickle.dump(s14Mpc_118kms_22,f)
	f.close()
	f = open('s14Mpc_Sig0_10.dat','w')
	pickle.dump(s14Mpc_Sig0_10,f)
	f.close()
	f = open('s14Mpc_118kms_10.dat','w')
	pickle.dump(s14Mpc_118kms_10,f)
	f.close()
	


#Below is obselete, refer to plotting.py
"""
fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.axis([-.05,.25,-5,183])
ax2.axis([-.05,.25,-5,183])
ax1.scatter(s1.gasfracCosTheta,s1.thetadeg)
ax2.scatter(s2.gasfracCosTheta,s2.thetadeg)
plt.show()

fig, ax = plt.subplots()
cm = plt.cm.get_cmap('RdYlBu')
im = plt.scatter(s1.gasfracCosTheta,s1.thetadeg,c=s1.m2002,norm=matplotlib.colors.LogNorm(vmin=s1.m2002.min(),vmax=10**6),s=35,cmap=cm,marker='o')
cbar = plt.colorbar(im, ax=ax)
plt.axis([-.05,.25,-5,183])
plt.show()
"""
"""
#plot ZJ spinparam for 1.12Mpc
fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,sharex = 'col',sharey='row',figsize=(12,10))
cm = plt.cm.get_cmap('RdYlBu')
ax1.set_xscale('log')
ax1.set_yscale('log')
ax2.set_xscale('log')
ax2.set_yscale('log')
ax3.set_xscale('log')
ax3.set_yscale('log')
ax4.set_xscale('log')
ax4.set_yscale('log')
im1 = ax1.scatter(s112Mpc_Sig0_22.m200,s112Mpc_Sig0_22.jsptotspinparam,c=s112Mpc_Sig0_22.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im2 = ax2.scatter(s112Mpc_118kms_22.m200,s112Mpc_118kms_22.jsptotspinparam,c=s112Mpc_118kms_22.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im3 = ax3.scatter(s112Mpc_Sig0_10.m200,s112Mpc_Sig0_10.jsptotspinparam,c=s112Mpc_Sig0_10.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im4 = ax4.scatter(s112Mpc_118kms_10.m200,s112Mpc_118kms_10.jsptotspinparam,c=s112Mpc_118kms_10.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
fig.text(.5,.01,'Spin Parameter',ha = 'center')
fig.text(.04,.5,'$M_{200}$  $(M_{\odot}/h)$',va='center',rotation='vertical')
fig.text(.04,.75,"$z=10$", ha ='center', va = 'center', rotation = 45)
fig.text(.04,.25, "$z=20$", ha = 'center', va = 'center', rotation = 45)
fig.suptitle("1.12Mpc Box")
fig.subplots_adjust(right=.8)
cbar_ax = fig.add_axes([.85,.15,.05,.7])
cbar = fig.colorbar(im1,cax=cbar_ax)
cbar.set_label("Gas Fraction")
plt.subplots_adjust(wspace=.08,hspace=.08)
plt.savefig('ZJspinparam1.12Mpc.png')
plt.show()

#plot ZJ spinparam for 1.4Mpc
fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,sharex = 'col',sharey='row',figsize=(12,10))
cm = plt.cm.get_cmap('RdYlBu')
ax1.set_xscale('log')
ax1.set_yscale('log')
ax2.set_xscale('log')
ax2.set_yscale('log')
ax3.set_xscale('log')
ax3.set_yscale('log')
ax4.set_xscale('log')
ax4.set_yscale('log')
im1 = ax1.scatter(s14Mpc_Sig0_22.m200,s14Mpc_Sig0_22.jsptotspinparam,c=s14Mpc_Sig0_22.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im2 = ax2.scatter(s14Mpc_118kms_22.m200,s14Mpc_118kms_22.jsptotspinparam,c=s14Mpc_118kms_22.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im3 = ax3.scatter(s14Mpc_Sig0_10.m200,s14Mpc_Sig0_10.jsptotspinparam,c=s14Mpc_Sig0_10.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
im4 = ax4.scatter(s14Mpc_118kms_10.m200,s14Mpc_118kms_10.jsptotspinparam,c=s14Mpc_118kms_10.gasfrac,s=35,cmap=cm,marker='o',vmin=0.,vmax=.2)
fig.text(.5,.01,'Spin Parameter',ha = 'center')
fig.text(.04,.5,'$M_{200}$  $(M_{\odot}/h)$',va='center',rotation='vertical')
fig.text(.04,.75,"$z=10$", ha ='center', va = 'center', rotation = 45)
fig.text(.04,.25, "$z=20$", ha = 'center', va = 'center', rotation = 45)
fig.suptitle("1.4Mpc Box")
fig.subplots_adjust(right=.8)
cbar_ax = fig.add_axes([.85,.15,.05,.7])
cbar = fig.colorbar(im1,cax=cbar_ax)
cbar.set_label("Gas Fraction")
plt.subplots_adjust(wspace=.08,hspace=.08)
plt.savefig('ZJspinparam1.4Mpc.png')
plt.show()
"""

'''
#Plot lognormal dist ZS spin param
sig, loc, scale = stats.lognorm.fit(jsptotspinparam,floc=0)

plt.hist(jsptotspinparam, bins = 500, normed = True)

xmin = jsptotspinparam.min()
xmax = jsptotspinparam.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig,loc=0,scale=scale)
plt.plot(x, pdf, 'k')
plt.xlabel("Spin parameter")
plt.ylabel("Number counts")
plt.axis([0,.4,0,20])
plt.title("$\lambda_0 = $ %.4f, $\sigma = $ %.4f" % (scale, sig))
#plt.show()
'''
'''
#Plot lognormal dist ZS DM spin param
sig, loc, scale = stats.lognorm.fit(jspdmspinparam,floc=0)
plt.hist(jspdmspinparam, bins = 500, normed = True)

xmin = jspdmspinparam.min()
xmax = jspdmspinparam.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig,loc=0,scale=scale)
plt.plot(x, pdf, 'k')
plt.xlabel("Spin parameter")
plt.ylabel("Number counts")
plt.axis([0,.4,0,20])
plt.title("$\lambda_0 = $ %.4f, $\sigma = $ %.4f" % (scale, sig))
#plt.show()
'''
"""
#Plot lognormal dist ZS gas spin param
fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2,sharex = 'col',sharey='row',figsize=(12,10))
#First panel ax1
#Fix possible zeros due to no gas in halos

s112Mpc_Sig0_22.jspgasspinparam0 = s112Mpc_Sig0_22.jspgasspinparam[s112Mpc_Sig0_22.jspgasspinparam != 0.]
sig1, loc1, scale1 = stats.lognorm.fit(s112Mpc_Sig0_22.jspgasspinparam,floc=0)
ax1.hist(s112Mpc_Sig0_22.jspgasspinparam0, bins = 500, normed = True,alpha=.5,color = 'r', label = '$v_{bc}=0$')

xmin = s112Mpc_Sig0_22.jspgasspinparam0.min()
xmax = s112Mpc_Sig0_22.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig1,loc=0,scale=scale1)
ax1.plot(x, pdf, color='r')

s112Mpc_118kms_22.jspgasspinparam0 = s112Mpc_118kms_22.jspgasspinparam[s112Mpc_118kms_22.jspgasspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s112Mpc_118kms_22.jspgasspinparam,floc=0)
ax1.hist(s112Mpc_118kms_22.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'b', label = '$v_{bc} = 2\sigma_{v_{bc}}$')


xmin = s112Mpc_118kms_22.jspgasspinparam0.min()
xmax = s112Mpc_118kms_22.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
ax1.plot(x, pdf, color='b')
ax1.axis([0,.4,0,20])


#2nd panel ax2
#Fix possible zeros due to no gas in halos

s14Mpc_Sig0_22.jspgasspinparam0 = s14Mpc_Sig0_22.jspgasspinparam[s14Mpc_Sig0_22.jspgasspinparam != 0.]
sig1, loc1, scale1 = stats.lognorm.fit(s14Mpc_Sig0_22.jspgasspinparam,floc=0)
ax2.hist(s14Mpc_Sig0_22.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'r', label = '$v_{bc}=0$')

xmin = s14Mpc_Sig0_22.jspgasspinparam0.min()
xmax = s14Mpc_Sig0_22.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig1,loc=0,scale=scale1)
ax2.plot(x, pdf, color='r')

s14Mpc_118kms_22.jspgasspinparam0 = s14Mpc_118kms_22.jspgasspinparam[s14Mpc_118kms_22.jspgasspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s14Mpc_118kms_22.jspgasspinparam,floc=0)
ax2.hist(s14Mpc_118kms_22.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'b', label = '$v_{bc} = 2\sigma_{v_{bc}}$')


xmin = s14Mpc_118kms_22.jspgasspinparam0.min()
xmax = s14Mpc_118kms_22.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
ax2.plot(x, pdf, color='b')
ax2.axis([0,.4,0,20])
ax2.legend()

#First panel ax3
#Fix possible zeros due to no gas in halos

s112Mpc_Sig0_10.jspgasspinparam0 = s112Mpc_Sig0_10.jspgasspinparam[s112Mpc_Sig0_10.jspgasspinparam != 0.]
sig1, loc1, scale1 = stats.lognorm.fit(s112Mpc_Sig0_10.jspgasspinparam,floc=0)
ax3.hist(s112Mpc_Sig0_10.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'r', label = '$v_{bc}=0$')

xmin = s112Mpc_Sig0_10.jspgasspinparam0.min()
xmax = s112Mpc_Sig0_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig1,loc=0,scale=scale1)
ax3.plot(x, pdf, color='r')

s112Mpc_118kms_10.jspgasspinparam0 = s112Mpc_118kms_10.jspgasspinparam[s112Mpc_118kms_10.jspgasspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s112Mpc_118kms_10.jspgasspinparam,floc=0)
ax3.hist(s112Mpc_118kms_10.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'b', label = '$v_{bc} = 2\sigma_{v_{bc}}$')


xmin = s112Mpc_118kms_10.jspgasspinparam0.min()
xmax = s112Mpc_118kms_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
ax3.plot(x, pdf, color='b')
ax3.axis([0,.4,0,20])

#testing inset
left, bottom, width, height = [0.3, 0.2, 0.2, 0.3]
subax3 = fig.add_axes([left, bottom, width, height])

s112Mpc_Sig0_10.jspdmspinparam0 = s112Mpc_Sig0_10.jspdmspinparam[s112Mpc_Sig0_10.jspdmspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s112Mpc_Sig0_10.jspdmspinparam,floc=0)
subax3.hist(s112Mpc_Sig0_10.jspdmspinparam0, bins = 200, normed = True,alpha=.3,color = 'r', label = '$v_{bc} = 0$')

xmin = s112Mpc_Sig0_10.jspgasspinparam0.min()
xmax = s112Mpc_Sig0_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
subax3.plot(x, pdf, color='r')
subax3.axis([0,.4,0,25])

s112Mpc_118kms_10.jspdmspinparam0 = s112Mpc_118kms_10.jspdmspinparam[s112Mpc_118kms_10.jspdmspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s112Mpc_118kms_10.jspdmspinparam,floc=0)
subax3.hist(s112Mpc_118kms_10.jspdmspinparam0, bins = 200, normed = True,alpha=.5,color = 'b', label = '$v_{bc} = 2\sigma_{v_{bc}}$')

xmin = s112Mpc_118kms_10.jspgasspinparam0.min()
xmax = s112Mpc_118kms_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
subax3.plot(x, pdf, color='b')
subax3.axis([0,.4,0,20])



#4rd panel ax4
#Fix possible zeros due to no gas in halos

s14Mpc_Sig0_10.jspgasspinparam0 = s14Mpc_Sig0_10.jspgasspinparam[s14Mpc_Sig0_10.jspgasspinparam != 0.]
sig1, loc1, scale1 = stats.lognorm.fit(s14Mpc_Sig0_10.jspgasspinparam,floc=0)
ax4.hist(s14Mpc_Sig0_10.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'r', label = '$v_{bc}=0$')

xmin = s14Mpc_Sig0_10.jspgasspinparam0.min()
xmax = s14Mpc_Sig0_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig1,loc=0,scale=scale1)
ax4.plot(x, pdf, color='r')

s14Mpc_118kms_10.jspgasspinparam0 = s14Mpc_118kms_10.jspgasspinparam[s14Mpc_118kms_10.jspgasspinparam != 0.]
sig2, loc2, scale2 = stats.lognorm.fit(s14Mpc_118kms_10.jspgasspinparam,floc=0)
ax4.hist(s14Mpc_118kms_10.jspgasspinparam0, bins = 200, normed = True,alpha=.5,color = 'b', label = '$v_{bc} = 2\sigma_{v_{bc}}$')


xmin = s14Mpc_118kms_10.jspgasspinparam0.min()
xmax = s14Mpc_118kms_10.jspgasspinparam0.max()
x = np.linspace(xmin,xmax,1000)
pdf = stats.lognorm.pdf(x,sig2,loc=0,scale=scale2)
ax4.plot(x, pdf, color='b')
ax4.axis([0,.4,0,20])

fig.text(.5,.01,'Spin Parameter',ha = 'center')
fig.text(.04,.5,'Number counts',va='center',rotation='vertical')
fig.text(.04,.75,"$z=10$", ha ='center', va = 'center', rotation = 45)
fig.text(.04,.25, "$z=20$", ha = 'center', va = 'center', rotation = 45)
fig.text(.25,.94,"1.12Mpc", ha ='center', va = 'center', rotation = 45)
fig.text(.75,.94, "1.4Mpc", ha = 'center', va = 'center', rotation = 45)

fig.suptitle("Gas Spin Parameter Distributions")
#plt.subplots_adjust(wspace=.08,hspace=.08)

#plt.savefig('ZJspinparamdist.png')
plt.show()
"""
