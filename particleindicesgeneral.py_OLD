from sys import argv
import numpy as np
import readsubfHDF5
import snapHDF5 
import hdf5lib


#Should be run with a snap number input
script, s_res, s_vel,  s_snap = argv
snapnum = int(s_snap) 
vel = s_vel 
res = s_res 


filename = "/n/hernquistfs3/mvogelsberger/GlobularClusters/InterfaceWArepo_All_" + res + '_' + vel  + "/output/"
filename2 = filename +  "DM_FOF" #Used for readsubfHDF5
filename3 = filename + "snap_" + str(snapnum).zfill(3) #Used for hdf5lib, snapHDF5
if res == '2.8Mpc':
	filename3 = filename + "snapdir_" + str(snapnum).zfill(3)+"/snap_" + str(snapnum).zfill(3)  
def dx_wrap(dx,box):
	idx = dx > +box/2.0
	dx[idx] -= box
	idx = dx < -box/2.0
	dx[idx] += box 
	return dx
def dist2(dx,dy,dz,box):
	return dx_wrap(dx,box)**2 + dx_wrap(dy,box)**2 + dx_wrap(dz,box)**2
	

#Units
GRAVITY_cgs = 6.672e-8
UnitLength_in_cm = 3.085678e21 # code length unit in cm/h
UnitMass_in_g = 1.989e43       # code length unit in g/h
UnitVelocity_in_cm_per_s = 1.0e5
UnitTime_in_s= UnitLength_in_cm / UnitVelocity_in_cm_per_s
UnitDensity_in_cgs= UnitMass_in_g/ np.power(UnitLength_in_cm,3)
UnitPressure_in_cgs= UnitMass_in_g/ UnitLength_in_cm/ np.power(UnitTime_in_s,2)
UnitEnergy_in_cgs= UnitMass_in_g * np.power(UnitLength_in_cm,2) / np.power(UnitTime_in_s,2)
GCONST=GRAVITY_cgs/ np.power(UnitLength_in_cm,3) * UnitMass_in_g *  np.power(UnitTime_in_s,2)
critical_density = 3.0*.1 * .1 / 8.0/np.pi/GCONST #.1 is for 1/Mpc to 1/kpc, also in units of h^2

header = snapHDF5.snapshot_header(filename3)
if res == "2.8Mpc":
	fs = hdf5lib.OpenFile(filename3 + ".0.hdf5")
else:
	fs = hdf5lib.OpenFile(filename3 + ".hdf5")
red = hdf5lib.GetAttr(fs, "Header", "Redshift")
atime = hdf5lib.GetAttr(fs, "Header", "Time")
boxSize = hdf5lib.GetAttr(fs, "Header", "BoxSize")
boxSize *= atime #convert from ckpc/h to kpc/h
Omega0 = hdf5lib.GetAttr(fs, "Header", "Omega0")
OmegaLambda = hdf5lib.GetAttr(fs, "Header", "OmegaLambda")
fs.close()
cat = readsubfHDF5.subfind_catalog(filename2, snapnum)
Omega_a = Omega0/(Omega0 + OmegaLambda * atime * atime * atime)
critical_density *= (Omega0/Omega_a)
r200 = cat.Group_R_Crit200
r200 *= atime #convert from ckpc/h to kpc/h
haloPos = cat.GroupPos
haloPos *= atime #convert from ckpc/h to kpc/h
#indices of haloes >300 dm particles and r200 not 0
goodidx, = np.where(np.logical_and(np.greater(cat.GroupLenType[:,1],300),np.not_equal(r200,0.)))

#Implementation for all halos
allgasindex = np.empty(np.size(r200),dtype=list)
alldmindex = np.empty(np.size(r200),dtype=list)
#Read in particles
posgas = snapHDF5.read_block(filename3, "POS ", parttype=0)
posdm = snapHDF5.read_block(filename3, "POS ", parttype=1)
#Redefine position units from ckpc/h to kpc/h
posgas *= atime
posdm *= atime
for j in goodidx:
	#Calculate indices of particles within r200
	indgas, = np.where(dist2(posgas[:,0]-haloPos[j][0],posgas[:,1]-haloPos[j][1],posgas[:,2]-haloPos[j][2],boxSize)  < r200[j]**2)
	allgasindex[j] = indgas
	inddm, = np.where(dist2(posdm[:,0]-haloPos[j][0],posdm[:,1]-haloPos[j][1],posdm[:,2]-haloPos[j][2],boxSize)  < r200[j]**2)
	alldmindex[j] = inddm
np.save("particleindex_" + res +'_'+ vel + '_'+  str(snapnum) + ".npy", (goodidx, allgasindex[goodidx], alldmindex[goodidx]))
"""
Read the above by
goodidx, allgasindex, alldmindex = np.load("particleindexingoodhaloz10.npy")
Make sure to loop over enumerates to correlate indices
"""

